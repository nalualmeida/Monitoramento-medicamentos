<!DOCTYPE html>
<html lang="pt">

<head>
  <link rel="stylesheet" href="style.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet'>
  <link href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css' rel='stylesheet'>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Minha Terapia - Hoje</title>
  <style>
    /* Estilos para os cards */
    .card {
      margin: 10px;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 8px #c23e39;
      transition: transform 0.2s;
    }
    .card:hover {
      transform: scale(1.02);
    }
    .card-header {
      font-size: 1.2em;
      font-weight: bold;
      background-color: #28d4ff;
    }
    .card-body {
      font-size: 1em;
      background-color: #353d3d11;
    }
    .card-footer {
      display: flex;
      justify-content: space-between;
    }
    .btn-confirm {
      margin-top: 10px;
      background-color: #39bfc2;
    }
    .btn-confirm:hover {
      margin-top: 10px;
      background-color: #39c287;
    }
  </style>
</head>

<body>

<div class="container">
  <header class="navbar navbar-expand-md fixed-top py-3">
    <div class="container-fluid flex-nowrap justify-content-between align-items-center">
      <div class="dropdown">
        <button class="btn btn-outline-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
          Config.
        </button>
        <ul class="config dropdown-menu">
          <li><a class="dropdown-item" href="#" aria-disabled="true">Nome: <%= user.nome_usuario %></a></li>
          <li><a class="dropdown-item" href="#" aria-disabled="true">E-mail: <%= user.email %></a></li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item" href="/alterarSenha">Alterar senha</a></li>
        </ul>
      </div>
      <h2>Minha Terapia</h2>
      <div class="">
        <ul class="navbar-nav me-auto mb-md-0"></ul>
        <button type="button" class="btn btn-outline-light" onclick="confirmLogout()">Sair</button>
      </div>
    </div>
  </header>
</div>

<main class="py-5">
  <div class="mt-5 pt-2 mb-5 text-center text-muted container d-flex flex-column">
    <h1 class="text-body-emphasis">Seus lembretes</h1>
    <div class="w-100 text-center container row">
      <%
        const lembretesConsolidados = [];
        
        // Consolidar lembretes com horários separados
        lembretes.forEach(lembrete => {
  if (lembrete.frequencia === 'Uma vez ao dia') {
    lembretesConsolidados.push({ id_lembrete: lembrete.id_lembrete, horario: lembrete.horario1, nome_medicamento: lembrete.nome_medicamento });
  } else if (lembrete.frequencia === 'Duas vezes ao dia') {
    lembretesConsolidados.push({ id_lembrete: lembrete.id_lembrete, horario: lembrete.horario1, nome_medicamento: lembrete.nome_medicamento });
    lembretesConsolidados.push({ id_lembrete: lembrete.id_lembrete, horario: lembrete.horario2, nome_medicamento: lembrete.nome_medicamento });
  } else if (lembrete.frequencia === 'Três vezes ao dia') {
    lembretesConsolidados.push({ id_lembrete: lembrete.id_lembrete, horario: lembrete.horario1, nome_medicamento: lembrete.nome_medicamento });
    lembretesConsolidados.push({ id_lembrete: lembrete.id_lembrete, horario: lembrete.horario2, nome_medicamento: lembrete.nome_medicamento });
    lembretesConsolidados.push({ id_lembrete: lembrete.id_lembrete, horario: lembrete.horario3, nome_medicamento: lembrete.nome_medicamento });
  }
});

        // Ordenar os lembretes pelo horário
        lembretesConsolidados.sort((a, b) => {
          return new Date('1970/01/01 ' + a.horario) - new Date('1970/01/01 ' + b.horario);
        });
      %>

      <% if (lembretesConsolidados.length > 0) { %>
        <% lembretesConsolidados.forEach((lembrete) => { %>
          <div class="col-md-6 col-lg-6 col-sm-6">
            <div class="card" id="card-<%= lembrete.id_lembrete %>">
                <div class="card-header" data-horario="<%= lembrete.horario %>">
                  <%= lembrete.horario %>
                </div>
                <div class="card-body">
                  <p><strong>Medicamento:</strong> <%= lembrete.nome_medicamento %></p>
                </div>
                <div class="card-footer">
                  <button class="btn btn-confirm w-100" id="btn-confirm-<%= lembrete.id_lembrete %>" onclick="confirmarMedicamento('<%= lembrete.id_lembrete %>')">Confirmar</button>
                </div>
              </div>
            </div>
          <% }) %>
      <% } else { %>
        <p>Nenhum registro encontrado.</p>
      <% } %>
    </div>
  </div>
</main>

<footer class="border-bottom py-3 fixed-bottom text-center">
  <div class="row align-items-center">
    <div class="col nav-item">
      <a href="/hoje" class="nav-link text-white text-decoration-none">Hoje</a>
    </div>
    <div class="col nav-item">
      <a class="nav-link text-white text-decoration-none" href="/suporte">Suporte</a>
    </div>
    <div class="col nav-item">
      <a class="nav-link text-white text-decoration-none" href="/tratamento">Tratamento</a>
    </div>
  </div>
</footer>

<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/service-worker.js')
      .then(registration => {
        console.log('Service Worker registrado com escopo:', registration.scope);
      }).catch(error => {
        console.log('Falha no registro do Service Worker:', error);
      });
  }

  function requestNotificationPermission() {
    if (Notification.permission !== 'granted') {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          console.log('Permissão para notificações concedida.');
          setAlarms();
        }
      });
    } else {
      setAlarms();
    }
  }

  function setAlarms() {
    const cards = document.querySelectorAll('.card-header');
    cards.forEach(card => {
      const horario = card.getAttribute('data-horario');
      const medicamento = card.nextElementSibling.querySelector('p').textContent.split(': ')[1];

      const [hours, minutes] = horario.split(':').map(Number);
      const now = new Date();
      let alarmTime = new Date();
      alarmTime.setHours(hours, minutes, 0, 0);

      if (alarmTime <= now) {
        alarmTime.setDate(alarmTime.getDate() + 1);
      }

      const timeToAlarm = alarmTime.getTime() - now.getTime();

      setTimeout(() => {
        notifyUser(medicamento);
      }, timeToAlarm);
    });
  }

  function notifyUser(medicamento) {
    if (Notification.permission === 'granted') {
      navigator.serviceWorker.ready.then(function(registration) {
        registration.showNotification('Lembrete de Medicamento', {
          body: `Está na hora de tomar o seu medicamento: ${medicamento}`,
          data: {
            medicamento: medicamento
          }
        });
      });
    }
  }

  requestNotificationPermission();

  function confirmarMedicamento(idLembrete) {
  console.log('ID do Lembrete:', idLembrete); // Log para depuração
  fetch(`/confirmarMedicamento/${idLembrete}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ id_lembrete: idLembrete })
  })
  .then(response => {
    if (response.ok) {
      const card = document.getElementById(`card-${idLembrete}`);
      const button = document.getElementById(`btn-confirm-${idLembrete}`);
      card.style.boxShadow = '0 4px 8px green';
      button.style.backgroundColor = '#28d4ff';
      button.innerHTML = '✓';
    } else {
      alert('Erro ao confirmar o medicamento');
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao confirmar o medicamento');
  });
}

function resetCards() {
  const cards = document.querySelectorAll('.card');
  cards.forEach(card => {
    card.style.boxShadow = '0 4px 8px #c23e39';
    const button = card.querySelector('.btn-confirm');
    button.style.backgroundColor = '#39bfc2';
    button.innerHTML = 'Confirmar';
  });
}

// Chame essa função à meia-noite para resetar os cards
const resetIndicator = localStorage.getItem('cardsReset');
if (!resetIndicator) {
  const now = new Date();
  const millisTillMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0, 0) - now;
  setTimeout(function() {
    resetCards();
    setInterval(resetCards, 24 * 60 * 60 * 1000); // reset todos os dias
    localStorage.setItem('cardsReset', 'true'); // Armazenar o indicador de reset
  }, millisTillMidnight);
}
// Calcular o tempo restante até o próximo reset com base na última data/hora de reset do usuário
async function calculateTimeToReset() {
  try {
    const response = await fetch('/getLastResetTime');
    const data = await response.json();
    
    if (data.success) {
      const lastResetTime = new Date(data.lastResetTime);
      const now = new Date();
      const timeSinceLastReset = now - lastResetTime;
      const timeUntilNextReset = 24 * 60 * 60 * 1000 - timeSinceLastReset;
      
      // Se o tempo até o próximo reset for negativo, já é hora de resetar
      if (timeUntilNextReset < 0) {
        resetCards();
      } else {
        setTimeout(resetCards, timeUntilNextReset);
        setInterval(resetCards, 24 * 60 * 60 * 1000);
      }
    } else {
      console.error('Erro ao obter a última data/hora de reset dos cards:', data.message);
    }
  } catch (error) {
    console.error('Erro ao calcular o tempo até o próximo reset dos cards:', error);
  }
}

// Chamar a função para calcular o tempo até o próximo reset
calculateTimeToReset();

</script>
<script src="scripts.js"></script>

</body>
</html>
